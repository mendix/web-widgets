name: Build mxbuild and mxruntime
on:
  workflow_dispatch: null
jobs:
  mxversion:
    name: Read versions file
    runs-on: ubuntu-latest
    outputs:
      mxversion: ${{ steps.readfile.outputs.mxversion }}
      mxbuild_tag: ${{ steps.readfile.outputs.mxbuild_tag }}
      mxbuild_path: ${{ steps.readfile.outputs.mxbuild_path }}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          fetch-depth: 1
      - id: readfile
        run: |
          MENDIX_VERSION=$(cat automation/run-e2e/mendix-versions.json | jq -r '.latest')
          echo "mxversion=$MENDIX_VERSION" | tee -a "$GITHUB_OUTPUT"
          echo "mxbuild_path=.docker-cache/mxbuild_$MENDIX_VERSION.tar" | tee -a "$GITHUB_OUTPUT"
          echo "mxbuild_tag=mxbuild:$MENDIX_VERSION" | tee -a "$GITHUB_OUTPUT"

  build-images:
    name: Build and save images
    runs-on: ubuntu-latest
    needs: mxversion
    env:
      MENDIX_VERSION: ${{needs.mxversion.outputs.mxversion}}
      MXBUILD_PATH: ${{needs.mxversion.outputs.mxbuild_path}}
      MXBUILD_TAG: ${{needs.mxversion.outputs.mxbuild_tag}}
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          fetch-depth: 1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@988b5a0280414f521da01fcc63a27aeeb4b104db
      - name: Create docker-cache dir
        run: mkdir -p .docker-cache
      - name: Cache mxbuild
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        id: cache
        with:
          path: ${{ env.MXBUILD_PATH }}
          key: ${{ env.MXBUILD_TAG }}
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Build ${{ env.MXBUILD_TAG }}
        uses: docker/build-push-action@5cd11c3a4ced054e52742c5fd54dca954e0edd85
        with:
          file: automation/run-e2e/docker/mxbuild.Dockerfile
          tags: ${{ env.MXBUILD_TAG }}
          outputs: type=docker,dest=${{ env.MXBUILD_PATH }}
          build-args: |
            MENDIX_VERSION=${{ env.MENDIX_VERSION }}

  e2e:
    name: Run automated end-to-end tests
    needs:
      - mxversion
      - build-images
    runs-on: ubuntu-latest
    permissions:
      packages: read
      contents: read
    env:
      MENDIX_VERSION: ${{needs.mxversion.outputs.mxversion}}
      MXBUILD_PATH: ${{needs.mxversion.outputs.mxbuild_path}}
      MXBUILD_TAG: ${{needs.mxversion.outputs.mxbuild_tag}}
    strategy:
      fail-fast: false
      matrix:
        index: [0]
    steps:
      - name: Download mxbuild cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        id: cache
        with:
          path: ${{ env.MXBUILD_PATH }}
          key: ${{ env.MXBUILD_TAG }}
      - name: Load mxbuild image
        run: |
          docker load --input ${{ env.MXBUILD_PATH }}
          docker image ls -a
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29
        with:
          fetch-depth: 0
      - name: Setup pnpm
        uses: pnpm/action-setup@a3252b78c470c02df07e9d59298aecedc3ccdd6d
      - name: Setup node
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8
        with:
          node-version-file: .nvmrc
          cache: pnpm
      - name: Get sha of main
        run: >-
          echo "main_sha=$(git rev-parse origin/main)" >> ${{ runner.os ==
          'Windows' && '$env:GITHUB_ENV' || '$GITHUB_ENV' }}
      - name: Restore Turbo Cache
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: node_modules/.cache/turbo
          key: >-
            turbo-cache-${{ runner.os }}-e2e-chunk-${{ matrix.index }}-${{
            env.main_sha }}
          restore-keys: |
            turbo-cache-${{ runner.os }}-e2e-chunk-${{ matrix.index }}
      - name: Install dependencies
        run: pnpm install
      - name: Store Playwright's Version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm info @playwright/test version)
          echo "Playwright's Version: $PLAYWRIGHT_VERSION"
          echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
      - name: Cache Playwright Browsers for Playwright's Version
        id: cache-playwright-browsers
        uses: actions/cache@0c45773b623bea8c8e75f6c82b208c3cf94ea4f9
        with:
          path: ~/.cache/ms-playwright
          key: 'playwright-browsers-${{ env.PLAYWRIGHT_VERSION }}'
      - name: Install Playwright Browsers
        if: steps.cache-playwright-browsers.outputs.cache-hit != 'true'
        run: pnpm exec playwright install --with-deps chromium
      - name: Executing E2E tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          node  ./automation/run-e2e/bin/run-e2e-in-chunks.mjs
          --chunks 3
          --index ${{ matrix.index }}
          --event-name ${{ github.event_name }}
      - name: Generating Github Test Summary
        run: |
          pnpm --filter run-e2e run report:merge
          pnpm dlx github-actions-ctrf custom
          ./automation/run-e2e/ctrf/merged-report.json
          ./automation/run-e2e/ctrf-custom-template/custom-summary.hbs
        if: always()
      - name: Fixing files permissions
        if: failure()
        run: |
          sudo find ${{ github.workspace }}/packages/* -type d -exec chmod 755 {} \;
          sudo find ${{ github.workspace }}/packages/* -type f -exec chmod 644 {} \;
      - name: Archive test screenshot diff results
        uses: actions/upload-artifact@5d5d22a31266ced268874388b861e4b58bb5c2f3
        if: failure()
        with:
          name: test-screenshot-results-${{ matrix.index }}
          path: |
            ${{ github.workspace }}/packages/**/**/test-results/**/*.png
            ${{ github.workspace }}/packages/**/**/test-results/**/*.zip
          if-no-files-found: error
