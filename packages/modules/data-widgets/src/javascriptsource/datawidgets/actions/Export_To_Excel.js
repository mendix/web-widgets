// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";
import { utils, writeFileXLSX } from './xlsx-export-tools.js';

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} datagridName
 * @param {string} fileName
 * @param {string} sheetName
 * @param {boolean} includeColumnHeaders
 * @param {Big} chunkSize - The number of items fetched and exported per request.
 * @returns {Promise.<boolean>}
 */
export async function Export_To_Excel(datagridName, fileName, sheetName, includeColumnHeaders, chunkSize) {
	// BEGIN USER CODE
    if (!fileName || !datagridName || !sheetName) {
        return false;
    }

    const REGISTRY_NAME = "com.mendix.widgets.web.datagrid.export";
    const registry = window[REGISTRY_NAME];
    const controller = registry.get(datagridName);

    if (controller === undefined) {
        return false;
    }

    return new Promise((resolve) => {
        function handler(req) {
            let worksheet;
            let headers;

            req.on("headers", (hds) => {
                headers = hds.map(header => header.name);
                if (includeColumnHeaders) {
                    worksheet = utils.aoa_to_sheet([headers]);
                }
            });

            req.on("data", (data) => {
                if (worksheet === undefined) {
                    worksheet = utils.aoa_to_sheet(data)
                } else {
                    utils.sheet_add_aoa(worksheet, data, { origin: -1 });
                }
            });

            req.on("end", () => {
                if (worksheet) {
                    // Set character width for each column
                    // https://docs.sheetjs.com/docs/csf/sheet#worksheet-object
                    worksheet["!cols"] = headers.map(header => ({
                        wch: header.length + 10
                    }));
                    const workbook = utils.book_new();
                    utils.book_append_sheet(workbook, worksheet, sheetName === "" ? "Data" : sheetName);
                    writeFileXLSX(workbook, `${fileName}.xlsx`);
                    resolve(true);
                } else {
                    resolve(false);
                }
            });

            req.on("abort", () => resolve(false));
        }

        controller.exportData(handler, {
            withHeaders: true,
            limit: chunkSize.toNumber()
        })
    });
	// END USER CODE
}
